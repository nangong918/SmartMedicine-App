
#-------------------------server Setting-------------------------

server:
  # 端口号
  port: ${random.int[10000,19999]}
  # 优雅关闭
  shutdown: graceful

#-------------------------spring Setting-------------------------
spring:
  #============ name
  application:
    name: test-service
  #============ International i18n (国际化)
  messages:
    # @value
    basename: i18n/messages
    encoding: UTF-8
  #-------------------------Kafka-------------------------
  # Kafka 配置项，对应 KafkaProperties 配置类
  kafka:
    bootstrap-servers: 127.0.0.1:9092 # 指定 Kafka Broker 地址，可以设置多个，以逗号分隔
    # Kafka Producer 配置项
    producer:
      # 极致的吞吐量
      acks: 0  # 不需要确认
      retries: 0  # 不重试
      batch.size: 16384  # 批量发送大小
      linger.ms: 0  # 立即发送，不等待
      buffer.memory: 33554432  # 缓冲区大小
      key-serializer: org.apache.kafka.common.serialization.StringSerializer # 消息的 key 的序列化
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer # 消息的 value 的序列化
    # Kafka Consumer 配置项
    consumer:
      auto-offset-reset: earliest # 设置消费者分组最初的消费进度为 earliest 。可参考博客 https://blog.csdn.net/lishuangzhe7047/article/details/74530417 理解
      enable-auto-commit: false  # 禁用自动提交
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: com.czy.api.domain
        fetch.min.bytes: 1  # 立即返回
        fetch.max.wait.ms: 1  # 快速返回
        max.poll.records: 100  # 每次拉取100条
    # Kafka Consumer Listener 监听器配置
    listener:
      missing-topics-fatal: false # 消费监听接口监听的主题不存在时，默认会报错。所以通过设置为 false ，解决报错
  #============ redis
  redis:
    host: ${REDIS_HOST:127.0.0.1}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PWD:Y)D7d%gXFsCL*&pdJ4f)}
    ssl: false          # Redis 是否启用 SSL
    timeout: 10000      # 连接超时时间
    database: 0         # 选择的数据库:Redis 默认提供 16 个数据库（索引 0 到 15）
    jedis:
      # 配置上连接池：增加对于数据连接的管理，提升访问的效率，也保证了对资源的合理利用
      pool:
        max-active: 50      # 最大活动连接数
        max-idle: 5         # 最大空闲连接数
        max-wait: 1         # 最小空闲连接数
        min-idle: 200       # 连接池最大阻塞等待时间（使用负值表示没有限制）

  #-------------------------RabbitMq-------------------------
  # RabbitMQ 配置项，对应 RabbitProperties 配置类
  rabbitmq:
    host: 127.0.0.1 # RabbitMQ 服务的地址
    port: 5672 # RabbitMQ 服务的端口
    username: guest # RabbitMQ 服务的账号
    password: guest # RabbitMQ 服务的密码
    template:
      # 对应 RabbitProperties.Retry 类
      retry:
        enabled: true # 开启发送机制
        max-attempts: 3 # 最大重试次数。默认为 3 。
        initial-interval: 1000 # 重试间隔，单位为毫秒。默认为 1000 。
    listener:
      simple:
        # 预取值:RabbitMQ 会 公平分发，每个消费者每次只拿 1 条消息，处理完再拿新的
        prefetch: 1 # 非公平
        # 对应 RabbitProperties.ListenerRetry 类
        retry:
          enabled: true # 开启消费重试机制
          max-attempts: 10 # 最大重试次数。默认为 3 。
          initial-interval: 1000 # 重试间隔，单位为毫秒。默认为 1000 。
          max-interval: 1200000 #重试最大时间间隔（单位毫秒）
          multiplier: 2 #间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间

test.debug:
  use-gateway-proxy: true
  address: 192.168.1.2
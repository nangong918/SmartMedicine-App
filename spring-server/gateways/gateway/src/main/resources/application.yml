
#-------------------------server Setting-------------------------

server:
  # 端口号 网关的端口号是不由Nacos管理的
  port: 8888
  # 优雅关闭
  shutdown: graceful

#-------------------------spring Setting-------------------------
spring:
  #============ name
  application:
    name: gateways
  #============ International i18n (国际化)
  messages:
    # @value
    basename: i18n/messages
    encoding: UTF-8
  #============ redis
  redis:
    host: ${REDIS_HOST:127.0.0.1}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PWD:Y)D7d%gXFsCL*&pdJ4f)}
    ssl: false          # Redis 是否启用 SSL
    timeout: 10000      # 连接超时时间
    database: 0         # 选择的数据库:Redis 默认提供 16 个数据库（索引 0 到 15）
    jedis:
      # 配置上连接池：增加对于数据连接的管理，提升访问的效率，也保证了对资源的合理利用
      pool:
        max-active: 50      # 最大活动连接数
        max-idle: 5         # 最大空闲连接数
        max-wait: 1         # 最小空闲连接数
        min-idle: 200       # 连接池最大阻塞等待时间（使用负值表示没有限制）

  #============ cloud
  cloud:
    # 网关
    gateway: # Spring Cloud GatewayApplication 配置项，对应 GatewayProperties 类
      # 路由配置项，对应 RouteDefinition 数组
      default-filters:
#        - name: Jwt
      routes:
        # Test
        - id: test # 路由的编号
          uri: https://www.baidu.com # 路由到的目标地址
          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组 http://localhost:8888/test
            - Path=/test
          filters:
            - StripPrefix=1 # 删除前缀，对应 StripPrefixFilter
        # minio
        - id: minio
          uri: http://127.0.0.1:9000  # 目标地址
          predicates:
            # oss 的minIO就配置为oss-minio不要改了
            - Path=/oss-minio/**  # 匹配路径
          filters:
            - StripPrefix=1  # 删除前缀

#        # ip
#        - id: ip-user
#          uri: lb://user-relationship-service
#          predicates:
#            - Path=/login/passwordRegisterUser
#            - Path=/login/passwordLoginUser
#            - Path=/login/sendSms
#            - Path=/login/smsLogin
#          filters:
#            - name: Ip
#            - StripPrefix=1       # 去掉第一个路径段(/user-relationship-service) 因为uri内会配置 lb://user-relationship-service
#
##         jwt
#        - id: jwt-user
#          uri: lb://user-relationship-service
#          predicates:
#            - Path=/login/passwordResetUserPassword
#          filters:
#            - name: Jwt
#            - StripPrefix=1
#
#        - id: jwt-message
#          uri: lb://message-service
#          predicates:
#            - Path=/chat/**
#            - Path=/webrtc/**
#          filters:
#            - name: Jwt
#            - StripPrefix=1
#
#        - id: jwt-relationship  # 确保此项ID也是唯一的
#          uri: lb://relationship-service
#          predicates:
#            - Path=/relation/**
#          filters:
#            - name: Jwt
#            - StripPrefix=1
      discovery:
        locator:
          enabled: false # 关闭Nacos服务发现，因为它会优先网关直接转发，从而使得网关的过滤器失效
          url-expression: "'lb://' + serviceId" # 路由的目标地址的表达式，默认为 "'lb://' + serviceId" ;lb://' 表示 负载均衡
          # "'lb://' + serviceId" Spring EL 表达式，将从注册中心获得到的服务列表，每一个服务的名字对应 serviceId，最终使用 Spring EL 表达式进行格式化。
          # 如果服务的spring.application.id=user-relationship-service；那么请求地址就是 http://localhost:8888/user-relationship-service/user/get?id=1
    # Nacos 作为服务发现
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
  #-------------------------debug-------------------------
debug:
  access-token-check: true
  all-log: false
  vcode-check: false
  debug: false

# Dubbo 配置项，对应 DubboConfigurationProperties 类
dubbo:
  scan:
    base-packages: com.czy.gateway.service # 指定 Dubbo 服务实现类的扫描基准包
  # Dubbo 服务暴露的协议配置，对应 ProtocolConfig Map
  protocols:
    dubbo:
      name: dubbo # 协议名称
      port: -1 # 协议端口，-1 表示自增端口，从 20880 开始
  # Dubbo 服务注册中心配置，对应 RegistryConfig 类
  registry:
    address: spring-cloud://127.0.0.1:8848 # 指定 Dubbo 服务注册中心的地址
  # Spring Cloud Alibaba Dubbo 专属配置项，对应 DubboCloudProperties 类
  cloud:
    subscribed-services: auth-sms-service # 设置订阅的应用列表，默认为 * 订阅所有应用。
